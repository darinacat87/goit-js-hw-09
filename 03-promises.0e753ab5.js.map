{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,gBAChCE,OAAQH,SAASC,cAAc,eAC/BG,SAAUJ,SAASC,cAAc,kBAwBnC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UACpBQ,QAAQC,IAAI,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,SAE1DG,EAAO,CAAEJ,WAAUC,UACnBQ,QAAQC,IAAI,sBAAqCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,UAExDA,MAjCPT,EAAKC,OAAOmB,iBAAiB,UAAU,SAAAC,GACrCA,EAAMC,iBAGN,IAFA,IAA8BC,EAoCvB,CACLd,MAAOe,OAAOxB,EAAKI,QAAQqB,OAC3BC,KAAMF,OAAOxB,EAAKK,OAAOoB,OACzBE,OAAQH,OAAOxB,EAAKM,SAASmB,QAvCzBG,EAAwBL,EAAxBd,MAAOiB,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OAEVE,EAAW,EAAGA,GAAYF,EAAQE,GAAY,EACrDtB,EAAcsB,EAAUD,GACrBE,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,EAAAlC,GAASmC,OAAOC,QACd,uBAAwCf,OAAfX,EAAS,QAAYW,OAANV,EAAM,UAGjD0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,EAAAlC,GAASmC,OAAOG,QACd,sBAAuCjB,OAAfX,EAAS,QAAYW,OAANV,EAAM,UAInDmB,GAASF,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayEl: document.querySelector('[name=delay]'),\n  stepEl: document.querySelector('[name=step]'),\n  amountEl: document.querySelector('[name=amount]'),\n};\n\nrefs.formEl.addEventListener('submit', event => {\n  event.preventDefault();\n  let { delay, step, amount } = onGettingData();\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject({ position, delay });\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n\nfunction onGettingData() {\n  return {\n    delay: Number(refs.delayEl.value),\n    step: Number(refs.stepEl.value),\n    amount: Number(refs.amountEl.value),\n  };\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","delayEl","stepEl","amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","concat","addEventListener","event","preventDefault","ref","Number","value","step","amount","delay1","position1","then","param","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.0e753ab5.js.map"}